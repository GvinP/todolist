{"version":3,"sources":["api/todolist-api.ts","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","redux/todolistReducer.ts","redux/taskReducer.ts","Todolist.tsx","App.tsx","serviceWorker.ts","redux/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","AddItemForm","React","memo","props","useState","title","setTitle","error","setError","addItem","trim","TextField","value","onChange","e","currentTarget","onKeyPress","key","helperText","IconButton","onClick","size","AddBox","EditableSpan","console","log","editMode","setEditMode","onBlur","autoFocus","onDoubleClick","className","Task","onClickHandler","useCallback","removeTask","todolistId","task","id","onChangeHandler","checked","changeTaskStatus","onChangeTaskTitleHandler","changeTaskTitle","ListItem","style","padding","justifyContent","Checkbox","color","status","DeleteOutline","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","post","delete","taskId","model","put","todolistsInitialState","changeTaskTC","dispatch","then","response","data","resultCode","type","changeTaskTitleAC","tasksInitialState","Todolist","useDispatch","useEffect","tasks","setTasksAC","items","addTask","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","changeTodolistTitle","tasksForTodolist","filter","t","minHeight","display","flexDirection","removeTodolist","List","map","ButtonGroup","variant","margin","Button","App","useSelector","state","todolists","removeTaskAC","removeTaskTC","addTaskAC","item","addTaskTC","addTodolist","addTodolistAC","addTodolistsTC","changeStatus","newTitle","changeTodolistTitleAC","changeFilterAC","mappedTodolists","el","Grid","Paper","elevation","minWidth","textAlign","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","marginLeft","Container","fixed","container","spacing","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","reduce","acc","stateCopy","newTodolist","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.bdec5283.chunk.js","sourcesContent":["import axios, {AxiosResponse} from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'e2b2d8ed-9e2a-4c10-8057-a81181e19d3c'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<ResponseType>('auth/me')\r\n    },\r\n    login(payload: LoginParamsType) {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{ userId: number }>>>('auth/login', payload)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>('auth/login')\r\n    }\r\n}\r\n\r\n// types\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormType) => {\r\n    // console.log('AddItemForm')\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title.trim());\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (e.key === 'Enter') {\r\n            addItem();\r\n        }\r\n    }\r\n    return <div>\r\n        <TextField value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   error={!!error}\r\n                   helperText={error}/>\r\n        <IconButton onClick={addItem} size={\"small\"}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})","import React, {ChangeEvent, useState} from \"react\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (title: string)=> void\r\n    className?: string\r\n}\r\n\r\nexport const EditableSpan = React.memo( (props: EditableSpanPropsType) => {\r\n    console.log('EditableSpan')\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n    let [title, setTitle] = useState('')\r\n    const onClickEditModeHandler = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n    const onClickViewModeHandler = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n    return editMode ?\r\n        <input value={title} onBlur={onClickViewModeHandler}\r\n               onChange={onChangeHandler} autoFocus/>\r\n        : <span onDoubleClick={onClickEditModeHandler} className={props.className}>{props.title}</span>\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton, ListItem} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {DeleteOutline} from \"@material-ui/icons\";\r\nimport {TaskType, UpdateTaskModelType} from \"./api/todolist-api\";\r\n\r\ntype TaskPropsType = {\r\n    changeTaskStatus: (todolistId: string, task: TaskType, status: number) => void\r\n    changeTaskTitle: (todolistId: string, taskId: string, newTitle: string) => void\r\n    removeTask: (todolistId: string, taskId: string) => void\r\n    todolistId: string\r\n    task: TaskType\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    // console.log('Task')\r\n    const onClickHandler = useCallback(() =>\r\n            props.removeTask(props.todolistId, props.task.id)\r\n        , [props])\r\n    // props.removeTask, props.todolistId, props.task.id\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.currentTarget.checked) {\r\n            props.changeTaskStatus(props.todolistId, props.task, 1)\r\n        } else {\r\n            props.changeTaskStatus(props.todolistId, props.task, 0)\r\n        }\r\n\r\n    }, [props])\r\n    // props.changeTaskStatus, props.todolistId, props.task.id\r\n    const onChangeTaskTitleHandler = useCallback((title: string) => {\r\n        props.changeTaskTitle(props.todolistId, props.task.id, title);\r\n    }, [props])\r\n    // props.changeTaskTitle, props.todolistId\r\n\r\n    return <ListItem key={props.task.id} style={{padding: '0', justifyContent: 'space-between'}}>\r\n        <Checkbox size={\"small\"}\r\n                  color={\"primary\"}\r\n                  onChange={onChangeHandler} checked={props.task.status === 1}/>\r\n        <EditableSpan title={props.task.title} onChange={onChangeTaskTitleHandler}\r\n                      className={props.task.status === 1 ? \"is-done\" : \"\"}/>\r\n        <IconButton onClick={onClickHandler} size={\"small\"}>\r\n            <DeleteOutline/>\r\n        </IconButton>\r\n    </ListItem>\r\n})","import {FilterValuesType} from \"../App\";\r\nimport {Dispatch} from \"redux\";\r\nimport {todolistsAPI, TodolistType} from \"../api/todolist-api\";\r\n\r\nexport const ADD_TODOLIST = 'ADD-TODOLIST'\r\nexport const SET_TODOLISTS = 'SET-TODOLISTS'\r\nexport const REMOVE_TODOLIST = 'REMOVE-TODOLIST'\r\nconst CHANGE_TODOLIST_TITLE = 'CHANGE-TODOLIST-TITLE'\r\nconst CHANGE_FILTER = 'CHANGE-FILTER'\r\n\r\ntype allActionsType = addTodolistActionType | changeTodolistTitleActionType\r\n    | changeFilterActionType | removeTodolistActionType | setTodolistActionType\r\n\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type addTodolistActionType = {\r\n    type: 'ADD-TODOLIST'\r\n    todolistId: string\r\n    title: string\r\n}\r\nexport type setTodolistActionType = {\r\n    type: 'SET-TODOLISTS'\r\n    todolists: Array<TodolistType>\r\n}\r\nexport type removeTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST'\r\n    todolistId: string\r\n}\r\ntype changeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE'\r\n    todolistId: string\r\n    title: string\r\n}\r\ntype changeFilterActionType = {\r\n    type: 'CHANGE-FILTER'\r\n    todolistId: string\r\n    value: FilterValuesType\r\n}\r\n\r\nexport const addTodolistAC = (todolistId: string, title: string): addTodolistActionType => {\r\n    return {\r\n        type: ADD_TODOLIST,\r\n        todolistId,\r\n        title\r\n    }\r\n}\r\nexport const removeTodolistAC = (todolistId: string): removeTodolistActionType => {\r\n    return {\r\n        type: REMOVE_TODOLIST,\r\n        todolistId\r\n    }\r\n}\r\nexport const changeTodolistTitleAC = (todolistId: string, title: string): changeTodolistTitleActionType => {\r\n    return {\r\n        type: CHANGE_TODOLIST_TITLE,\r\n        todolistId: todolistId,\r\n        title: title\r\n    }\r\n}\r\nexport const changeFilterAC = (todolistId: string, value: FilterValuesType): changeFilterActionType => {\r\n    return {\r\n        type: CHANGE_FILTER,\r\n        todolistId: todolistId,\r\n        value: value\r\n    }\r\n}\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>): setTodolistActionType => {\r\n    return {\r\n        type: SET_TODOLISTS,\r\n        todolists\r\n    }\r\n}\r\nexport const getTodolistsTC = () => (dispatch: Dispatch) => {\r\n    todolistsAPI.getTodolists()\r\n        .then(response => {\r\n            dispatch(setTodolistsAC(response.data))\r\n        })\r\n}\r\nexport const addTodolistsTC = (title: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.createTodolist(title)\r\n        .then(response => {\r\n            dispatch(addTodolistAC(response.data.data.item.id, response.data.data.item.title))\r\n        })\r\n}\r\nexport const removeTodolistsTC = (id: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.deleteTodolist(id)\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(removeTodolistAC(id))\r\n            }\r\n        })\r\n}\r\n\r\nconst todolistsInitialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistReducer = (state = todolistsInitialState, action: allActionsType): any => {\r\n    switch (action.type) {\r\n        case SET_TODOLISTS:\r\n            const todolists = action.todolists.map(el => ({...el, filter: 'all'}))\r\n            return [...state, ...todolists]\r\n        case ADD_TODOLIST:\r\n            const newTodolist = {id: action.todolistId, title: action.title, filter: 'all' as FilterValuesType};\r\n            return [newTodolist, ...state]\r\n        case CHANGE_TODOLIST_TITLE:\r\n            return state.map(el => el.id === action.todolistId ? {...el, title: action.title} : el)\r\n        case CHANGE_FILTER:\r\n            return state.map(el => el.id === action.todolistId ? {...el, filter: action.value} : el)\r\n        case REMOVE_TODOLIST:\r\n            return state.filter(el => el.id !== action.todolistId)\r\n        default:\r\n            return state\r\n    }\r\n}","import {\r\n    ADD_TODOLIST,\r\n    addTodolistActionType,\r\n    REMOVE_TODOLIST,\r\n    removeTodolistActionType,\r\n    SET_TODOLISTS,\r\n    setTodolistActionType\r\n} from \"./todolistReducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {TaskType, todolistsAPI, TodolistType, UpdateTaskModelType} from \"../api/todolist-api\";\r\n\r\n\r\nconst ADD_TASK = 'ADD-TASK'\r\nconst SET_TASKS = 'SET-TASKS'\r\nconst REMOVE_TASK = 'REMOVE-TASK'\r\nconst CHANGE_TASK = 'CHANGE-TASK'\r\nconst CHANGE_TASK_STATUS = 'CHANGE-TASK-STATUS'\r\n\r\nexport type TasksType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\ntype allActionsType = addTaskActionType | removeTaskActionType\r\n    | changeTaskActionType | changeTaskStatusActionType\r\n    | removeTodolistActionType | addTodolistActionType | setTasksActionType | setTodolistActionType\r\n\r\ntype addTaskActionType = {\r\n    type: 'ADD-TASK'\r\n    todolistId: string\r\n    task: TaskType\r\n}\r\ntype setTasksActionType = {\r\n    type: 'SET-TASKS'\r\n    todolistId: string\r\n    tasks: Array<TaskType>\r\n}\r\ntype removeTaskActionType = {\r\n    type: 'REMOVE-TASK'\r\n    todolistId: string\r\n    taskId: string\r\n}\r\ntype changeTaskActionType = {\r\n    type: 'CHANGE-TASK'\r\n    todolistId: string\r\n    taskId: string\r\n    model: UpdateTaskModelType\r\n}\r\ntype changeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS'\r\n    todolistId: string\r\n    task: TaskType\r\n    status: number\r\n}\r\nexport const addTaskAC = (todolistId: string, task: TaskType): addTaskActionType => {\r\n    return {\r\n        type: ADD_TASK,\r\n        todolistId,\r\n        task\r\n    }\r\n}\r\nexport const setTasksAC = (todolistId: string, tasks: Array<TaskType>): setTasksActionType => {\r\n    return {\r\n        type: SET_TASKS,\r\n        todolistId,\r\n        tasks\r\n    }\r\n}\r\nexport const removeTaskAC = (todolistId: string, taskId: string): removeTaskActionType => {\r\n    return {\r\n        type: REMOVE_TASK,\r\n        todolistId: todolistId,\r\n        taskId: taskId\r\n    }\r\n}\r\nexport const changeTaskTitleAC = (todolistId: string, taskId: string, model: UpdateTaskModelType): changeTaskActionType => {\r\n    return {\r\n        type: CHANGE_TASK,\r\n        todolistId,\r\n        taskId,\r\n        model\r\n    }\r\n}\r\nexport const changeTaskStatusAC = (todolistId: string, task: TaskType, status: number): changeTaskStatusActionType => {\r\n    return {\r\n        type: CHANGE_TASK_STATUS,\r\n        todolistId,\r\n        task,\r\n        status\r\n    }\r\n}\r\n\r\nexport const getTasksTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then(response => {\r\n            dispatch(setTasksAC(todolistId, response.data.items))\r\n        })\r\n}\r\n\r\nexport const addTaskTC = (todolistId: string, title: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(response => {\r\n            dispatch(addTaskAC(todolistId, response.data.data.item))\r\n        })\r\n}\r\n\r\nexport const removeTaskTC = (todolistId: string, taskId: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(response => {\r\n            if (response.data.resultCode === 0)\r\n                dispatch(removeTaskAC(todolistId, taskId))\r\n        })\r\n}\r\n\r\nexport const changeTaskTC = (todolistId: string, taskId: string, model: UpdateTaskModelType) => (dispatch: Dispatch) => {\r\n    todolistsAPI.updateTask(todolistId, taskId, model)\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(changeTaskTitleAC(todolistId, taskId, model))\r\n            }\r\n        })\r\n}\r\n\r\nconst tasksInitialState: TasksType = {}\r\n\r\nexport const taskReducer = (state = tasksInitialState, action: allActionsType): TasksType => {\r\n\r\n    switch (action.type) {\r\n        case ADD_TASK:\r\n            return {...state, [action.todolistId]: [action.task, ...state[action.todolistId]]}\r\n        case SET_TASKS:\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        case SET_TODOLISTS:\r\n            return action.todolists.reduce((acc: TasksType, el: TodolistType) => ({...acc, [el.id]: []}), {})\r\n        case REMOVE_TASK:\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(el => el.id !== action.taskId)}\r\n        case CHANGE_TASK:\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map(el => el.id === action.taskId ? {\r\n                    ...el,\r\n                    ...action.model\r\n                } : el)\r\n            }\r\n        case REMOVE_TODOLIST:\r\n            let stateCopy = {...state}\r\n            delete stateCopy[action.todolistId]\r\n            return stateCopy\r\n        case ADD_TODOLIST:\r\n            return {...state, [action.todolistId]: []}\r\n        default:\r\n            return state\r\n    }\r\n}","import React, {useCallback, useEffect} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, ButtonGroup, IconButton, List} from \"@material-ui/core\";\r\nimport {DeleteOutline} from \"@material-ui/icons\";\r\nimport {Task} from \"./Task\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {getTasksTC} from \"./redux/taskReducer\";\r\nimport {TaskType, UpdateTaskModelType} from \"./api/todolist-api\";\r\n\r\n\r\ntype PropsType = {\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (todolistId: string, taskId: string) => void\r\n    changeFilter: (todolistId: string, value: FilterValuesType) => void\r\n    addTask: (todolistId: string, title: string) => void\r\n    changeTaskStatus: (todolistId: string, task: TaskType, status: number) => void\r\n    changeTaskTitle: (todolistId: string, taskId: string, newTitle: string) => void\r\n    changeTodolistTitle: (todolistId: string, title: string) => void\r\n    filter: FilterValuesType\r\n    todolistId: string\r\n    removeTodolist: (todolistId: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsType) => {\r\n\r\n    const dispatch = useDispatch()\r\n    // console.log('Todolist')\r\n    useEffect(() => {\r\n        //@ts-ignore\r\n        dispatch(getTasksTC(props.todolistId))\r\n    }, [dispatch, props.todolistId])\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(props.todolistId, title.trim());\r\n    }, [props])\r\n    // props.addTask, props.todolistId\r\n    const onAllClickHandler = useCallback(() =>\r\n        props.changeFilter(props.todolistId, \"all\"), [props])\r\n    // props.changeFilter, props.todolistId\r\n    const onActiveClickHandler = useCallback(() =>\r\n        props.changeFilter(props.todolistId, \"active\"), [props])\r\n    // props.changeFilter, props.todolistId\r\n    const onCompletedClickHandler = useCallback(() =>\r\n        props.changeFilter(props.todolistId, \"completed\"), [props])\r\n    // props.changeFilter, props.todolistId\r\n    const changeTodolistTitle = useCallback((title: string) =>\r\n        props.changeTodolistTitle(props.todolistId, title), [props])\r\n    // props.changeTodolistTitle, props.todolistId\r\n\r\n    let tasksForTodolist = props.tasks\r\n    if (props.filter === \"active\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === 0);\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === 1);\r\n    }\r\n\r\n    return <div style={{minHeight: \"350px\", display: \"flex\", flexDirection: \"column\", justifyContent: \"space-between\"}}>\r\n        <div>\r\n            <h3><EditableSpan title={props.title} onChange={changeTodolistTitle}/>\r\n                <IconButton onClick={() => props.removeTodolist(props.todolistId)} size={\"small\"}>\r\n                    <DeleteOutline/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <List>\r\n                {\r\n                    tasksForTodolist.map(t => {\r\n                        return <Task task={t}\r\n                                     removeTask={props.removeTask}\r\n                                     changeTaskTitle={props.changeTaskTitle}\r\n                                     todolistId={props.todolistId}\r\n                                     changeTaskStatus={props.changeTaskStatus}\r\n                                     key={t.id}/>\r\n                    })\r\n                }\r\n            </List>\r\n        </div>\r\n        <ButtonGroup size={\"small\"} variant={\"contained\"} style={{margin: \"0 auto 15px\"}}>\r\n            <Button\r\n                color={props.filter === 'all' ? \"secondary\" : \"primary\"}\r\n                className={props.filter === 'all' ? \"active-filter\" : \"\"}\r\n                onClick={onAllClickHandler}>All\r\n            </Button>\r\n            <Button\r\n                color={props.filter === 'active' ? \"secondary\" : \"primary\"}\r\n                className={props.filter === 'active' ? \"active-filter\" : \"\"}\r\n                onClick={onActiveClickHandler}>Active\r\n            </Button>\r\n            <Button\r\n                color={props.filter === 'completed' ? \"secondary\" : \"primary\"}\r\n                className={props.filter === 'completed' ? \"active-filter\" : \"\"}\r\n                onClick={onCompletedClickHandler}>Completed\r\n            </Button>\r\n        </ButtonGroup>\r\n    </div>\r\n})\r\n\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from './Todolist';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {\r\n    addTodolistsTC,\r\n    changeFilterAC,\r\n    changeTodolistTitleAC,\r\n    getTodolistsTC,\r\n    removeTodolistsTC,\r\n    TodolistDomainType\r\n} from \"./redux/todolistReducer\";\r\nimport {addTaskTC, changeTaskTC, removeTaskTC, TasksType} from \"./redux/taskReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType, TypedDispatch} from \"./redux/store\";\r\nimport {TaskType} from \"./api/todolist-api\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\n\r\nfunction App() {\r\n    // console.log('App')\r\n    const dispatch = useDispatch<TypedDispatch>()\r\n    const tasks = useSelector<AppStateType, TasksType>(state => state.tasks)\r\n    const todolists = useSelector<AppStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n\r\n    useEffect(() => {\r\n        dispatch(getTodolistsTC())\r\n    }, [dispatch])\r\n\r\n    const removeTask = useCallback((todolistId: string, id: string) => {\r\n        dispatch(removeTaskTC(todolistId, id))\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback((todolistId: string, title: string) => {\r\n        dispatch(addTaskTC(todolistId, title))\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistsTC(title))\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback((todolistId: string, task: TaskType, status: number) => {\r\n        dispatch(changeTaskTC(todolistId, task.id, {title: task.title, status}))\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback((todolistId: string, taskId: string, newTitle: string) => {\r\n        dispatch(changeTaskTC(todolistId, taskId, {title: newTitle}))\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback((todolistId: string, title: string) => {\r\n        dispatch(changeTodolistTitleAC(todolistId, title))\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback((todolistId: string, value: FilterValuesType) => {\r\n        dispatch(changeFilterAC(todolistId, value))\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback((todolistId: string) => {\r\n        dispatch(removeTodolistsTC(todolistId))\r\n    }, [dispatch])\r\n\r\n    let mappedTodolists = todolists.map(el => {\r\n        return <Grid item key={el.id}>\r\n            <Paper elevation={8} style={{minWidth: \"230px\", textAlign: \"center\"}}>\r\n                <Todolist\r\n                    key={el.id}\r\n                    todolistId={el.id}\r\n                    title={el.title}\r\n                    tasks={tasks[el.id]}\r\n                    removeTask={removeTask}\r\n                    changeFilter={changeFilter}\r\n                    addTask={addTask}\r\n                    changeTaskStatus={changeStatus}\r\n                    changeTaskTitle={changeTaskTitle}\r\n                    changeTodolistTitle={changeTodolistTitle}\r\n                    filter={el.filter}\r\n                    removeTodolist={removeTodolist}\r\n                />\r\n            </Paper>\r\n        </Grid>\r\n    })\r\n    return (\r\n        <>\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{justifyContent: 'space-between'}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        TodoList\r\n                    </Typography>\r\n                    <Button color=\"inherit\" variant={\"outlined\"} style={{marginLeft: '15px'}}>Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>   {/* fixed - фиксированная ширина*/}\r\n                <Grid container style={{padding: \"20px 0\"}}>   {/* это 1 ряд*/}\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>   {/* это 2 ряд*/}\r\n                    {mappedTodolists}\r\n                </Grid>\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {taskReducer} from \"./taskReducer\";\r\nimport {todolistReducer} from \"./todolistReducer\";\r\nimport {AnyAction, applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk, { ThunkAction, ThunkDispatch } from \"redux-thunk\";\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: taskReducer,\r\n    todolists: todolistReducer\r\n})\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\n\r\nexport type TypedDispatch = ThunkDispatch<AppStateType, any, AnyAction>;\r\nexport type TypedThunk<ReturnType = void> = ThunkAction<\r\n    ReturnType,\r\n    AppStateType,\r\n    unknown,\r\n    AnyAction\r\n    >;\r\n\r\nexport default store;\r\n\r\n//@ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport store from \"./redux/store\";\r\nimport {Provider} from \"react-redux\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}